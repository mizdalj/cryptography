import pytest

from src.algorithms.symmetric.aes import sub_bytes, shift_rows, mix_columns, add_round_key, galois_mult


def test_sub_bytes():
    samples = [
        {
            'initial': [
                [0x00, 0x01, 0x02, 0x03],
                [0x04, 0x05, 0x06, 0x07],
                [0x08, 0x09, 0x0a, 0x0b],
                [0x0c, 0x0d, 0x0e, 0x0f]
            ],
            'expected': [
                [0x63, 0x7c, 0x77, 0x7b],
                [0xf2, 0x6b, 0x6f, 0xc5],
                [0x30, 0x01, 0x67, 0x2b],
                [0xfe, 0xd7, 0xab, 0x76]
            ]
        },
        {
            'initial': [
                [0x10, 0x11, 0x12, 0x13],
                [0x14, 0x15, 0x16, 0x17],
                [0x18, 0x19, 0x1a, 0x1b],
                [0x1c, 0x1d, 0x1e, 0x1f]
            ],
            'expected': [
                [0xca, 0x82, 0xc9, 0x7d],
                [0xfa, 0x59, 0x47, 0xf0],
                [0xad, 0xd4, 0xa2, 0xaf],
                [0x9c, 0xa4, 0x72, 0xc0]
            ]
        },
        {
            'initial': [
                [0x20, 0x21, 0x22, 0x23],
                [0x24, 0x25, 0x26, 0x27],
                [0x28, 0x29, 0x2a, 0x2b],
                [0x2c, 0x2d, 0x2e, 0x2f]
            ],
            'expected': [
                [0xb7, 0xfd, 0x93, 0x26],
                [0x36, 0x3f, 0xf7, 0xcc],
                [0x34, 0xa5, 0xe5, 0xf1],
                [0x71, 0xd8, 0x31, 0x15]
            ]
        }
    ]

    for sample in samples:
        initial_state = sample['initial']
        expected_state = sample['expected']
        result_state = sub_bytes(initial_state)
        assert result_state == expected_state, f"Expected {expected_state}, but got {result_state}"


def test_shift_rows():
    samples = [
        {
            'initial': [
                [0x32, 0x88, 0x31, 0xe0],
                [0x43, 0x5a, 0x31, 0x37],
                [0xf6, 0x30, 0x98, 0x07],
                [0xa8, 0x8d, 0xa2, 0x34]
            ],
            'expected': [
                [0x32, 0x88, 0x31, 0xe0],
                [0x5a, 0x31, 0x37, 0x43],
                [0x98, 0x07, 0xf6, 0x30],
                [0x34, 0xa8, 0x8d, 0xa2]
            ]
        },
        {
            'initial': [
                [0x00, 0x01, 0x02, 0x03],
                [0x04, 0x05, 0x06, 0x07],
                [0x08, 0x09, 0x0a, 0x0b],
                [0x0c, 0x0d, 0x0e, 0x0f]
            ],
            'expected': [
                [0x00, 0x01, 0x02, 0x03],
                [0x05, 0x06, 0x07, 0x04],
                [0x0a, 0x0b, 0x08, 0x09],
                [0x0f, 0x0c, 0x0d, 0x0e]
            ]
        },
        {
            'initial': [
                [0x0f, 0x0e, 0x0d, 0x0c],
                [0x0b, 0x0a, 0x09, 0x08],
                [0x07, 0x06, 0x05, 0x04],
                [0x03, 0x02, 0x01, 0x00]
            ],
            'expected': [
                [0x0f, 0x0e, 0x0d, 0x0c],
                [0x0a, 0x09, 0x08, 0x0b],
                [0x05, 0x04, 0x07, 0x06],
                [0x00, 0x03, 0x02, 0x01]
            ]
        }
    ]

    for sample in samples:
        initial_state = sample['initial']
        expected_state = sample['expected']
        result_state = shift_rows(initial_state)
        assert result_state == expected_state, f"Expected {expected_state}, but got {result_state}"


def test_galois_mult():
    # Case 1: Original provided test
    assert galois_mult(0x57, 0x13) == 0xFE, f"Error: Expected 0xFE, Got {hex(galois_mult(0x57, 0x13))}"

    # Case 2: Tests on multiplication with 0x02
    assert galois_mult(0x02, 0x57) == 0xAE, f"Error: Expected 0xAE, Got {hex(galois_mult(0x02, 0x57))}"
    assert galois_mult(0x02, 0x7F) == 0xFE, f"Error: Expected 0xFE, Got {hex(galois_mult(0x02, 0x7F))}"
    assert galois_mult(0x02,
                       0x80) == 0x1B, f"Error: Expected 0x1B, Got {hex(galois_mult(0x02, 0x80))}"  # With wrap-around

    # Case 3: Tests on multiplication with 0x01 (identity operation in GF(2^8))
    assert galois_mult(0x03,
                       0x57) == 0xF9, f"Error: Expected 0xF9, Got {hex(galois_mult(0x03, 0x57))}"  # This is 0x57 xor 0xAE

    # Case 4: Tests on multiplication with 0x03 (this operation is essentially 0x57 xor (0x57 shifted left))
    expected = 0x57 ^ 0xAE  # This is 0x57 xor 0xAE
    assert galois_mult(0x03, 0x57) == expected, f"Error: Expected {hex(expected)}, Got {hex(galois_mult(0x03, 0x57))}"

    # Additional cases from our discussions:
    assert galois_mult(0x02,
                       0x88) == 0x0B, f"Error: Expected 0x0B, Got {hex(galois_mult(0x02, 0x88))}"  # With wrap-around
    assert galois_mult(0x01,
                       0x8d) == 0x8D, f"Error: Expected 0x8D, Got {hex(galois_mult(0x01, 0x8D))}"  # Identity operation


def test_mix_columns():
    samples = [
        {
            'initial': [
                [0x32, 0x88, 0x31, 0xe0],
                [0x43, 0x5a, 0x31, 0x37],
                [0xf6, 0x30, 0x98, 0x07],
                [0xa8, 0x8d, 0xa2, 0x34]
            ],
            'expected': [
                [0xFF, 0x4E, 0xF3, 0x03],
                [0x4F, 0xE0, 0xA4, 0x20],
                [0x72, 0xC0, 0x13, 0x11],
                [0x7A, 0x17, 0x11, 0x3C]
            ]

        },
    ]

    for sample in samples:
        initial_state = sample['initial']
        expected_state = sample['expected']
        result_state = mix_columns(initial_state)
        assert result_state == expected_state, f"Expected {expected_state}, but got {result_state}"


def test_add_round_key():
    samples = [
        {
            'initial': [
                [0x32, 0x88, 0x31, 0xe0],
                [0x43, 0x5a, 0x31, 0x37],
                [0xf6, 0x30, 0x98, 0x07],
                [0xa8, 0x8d, 0xa2, 0x34]
            ],
            'round_key': [
                [0x2b, 0x28, 0xab, 0x09],
                [0x7e, 0xae, 0xf7, 0xcf],
                [0x15, 0xd2, 0x15, 0x4f],
                [0x16, 0xa6, 0x88, 0x3c]
            ],
            'expected': [
                [0x19, 0xa0, 0x9a, 0xe9],
                [0x3d, 0xf4, 0xc6, 0xf8],
                [0xe3, 0xe2, 0x8d, 0x48],
                [0xbe, 0x2b, 0x2a, 0x08]
            ]
        },
        {
            'initial': [
                [0x54, 0x73, 0x20, 0x67],
                [0x68, 0x20, 0x4b, 0x20],
                [0x61, 0x6d, 0x75, 0x2e],
                [0x28, 0x29, 0x2f, 0x29]
            ],
            'round_key': [
                [0x2b, 0x28, 0xab, 0x09],
                [0x7e, 0xae, 0xf7, 0xcf],
                [0x15, 0xd2, 0x15, 0x4f],
                [0x16, 0xa6, 0x88, 0x3c]
            ],
            'expected': [
                [0x7f, 0x5b, 0x8b, 0x6e],
                [0x16, 0x86, 0xbc, 0xef],
                [0x74, 0xbf, 0x60, 0x21],
                [0x3e, 0x8f, 0xa7, 0x15]
            ]
        }
    ]

    for sample in samples:
        initial_state = sample['initial']
        round_key = sample['round_key']
        expected_state = sample['expected']
        result_state = add_round_key(initial_state, round_key)
        assert result_state == expected_state, f"Expected {expected_state}, but got {result_state}"
